/*
 * Generated by gdbus-codegen 2.30.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SRC_CONNMAN_GENERATED_H__
#define __SRC_CONNMAN_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (connman_proxy_org_freedesktop_dbus_introspectable_get_type ())
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, ConnmanProxyOrgFreedesktopDBusIntrospectable))
#define CONNMAN_PROXY_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, ConnmanProxyOrgFreedesktopDBusIntrospectableIface))

struct _ConnmanProxyOrgFreedesktopDBusIntrospectable;
typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectable ConnmanProxyOrgFreedesktopDBusIntrospectable;
typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableIface ConnmanProxyOrgFreedesktopDBusIntrospectableIface;

struct _ConnmanProxyOrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    ConnmanProxyOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType connman_proxy_org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *connman_proxy_org_freedesktop_dbus_introspectable_interface_info (void);
guint connman_proxy_org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void connman_proxy_org_freedesktop_dbus_introspectable_complete_introspect (
    ConnmanProxyOrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);



/* D-Bus method calls: */
void connman_proxy_org_freedesktop_dbus_introspectable_call_introspect (
    ConnmanProxyOrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_org_freedesktop_dbus_introspectable_call_introspect_finish (
    ConnmanProxyOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_org_freedesktop_dbus_introspectable_call_introspect_sync (
    ConnmanProxyOrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (connman_proxy_org_freedesktop_dbus_introspectable_proxy_get_type ())
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, ConnmanProxyOrgFreedesktopDBusIntrospectableProxy))
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, ConnmanProxyOrgFreedesktopDBusIntrospectableProxyClass))
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, ConnmanProxyOrgFreedesktopDBusIntrospectableProxyClass))
#define CONNMAN_PROXY_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define CONNMAN_PROXY_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableProxy ConnmanProxyOrgFreedesktopDBusIntrospectableProxy;
typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableProxyClass ConnmanProxyOrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableProxyPrivate ConnmanProxyOrgFreedesktopDBusIntrospectableProxyPrivate;

struct _ConnmanProxyOrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnmanProxyOrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _ConnmanProxyOrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType connman_proxy_org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

void connman_proxy_org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyOrgFreedesktopDBusIntrospectable *connman_proxy_org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyOrgFreedesktopDBusIntrospectable *connman_proxy_org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void connman_proxy_org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyOrgFreedesktopDBusIntrospectable *connman_proxy_org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyOrgFreedesktopDBusIntrospectable *connman_proxy_org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (connman_proxy_org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, ConnmanProxyOrgFreedesktopDBusIntrospectableSkeleton))
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonClass))
#define CONNMAN_PROXY_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonClass))
#define CONNMAN_PROXY_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define CONNMAN_PROXY_IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableSkeleton ConnmanProxyOrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonClass ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonPrivate ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _ConnmanProxyOrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _ConnmanProxyOrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType connman_proxy_org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

ConnmanProxyOrgFreedesktopDBusIntrospectable *connman_proxy_org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Manager */

#define CONNMAN_PROXY_TYPE_MANAGER (connman_proxy_manager_get_type ())
#define CONNMAN_PROXY_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_MANAGER, ConnmanProxyManager))
#define CONNMAN_PROXY_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_MANAGER))
#define CONNMAN_PROXY_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONNMAN_PROXY_TYPE_MANAGER, ConnmanProxyManagerIface))

struct _ConnmanProxyManager;
typedef struct _ConnmanProxyManager ConnmanProxyManager;
typedef struct _ConnmanProxyManagerIface ConnmanProxyManagerIface;

struct _ConnmanProxyManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_connect_provider) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_unnamed_arg0);

  gboolean (*handle_connect_service) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_unnamed_arg0);

  gboolean (*handle_create_session) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  gboolean (*handle_destroy_session) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_disable_technology) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_enable_technology) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_properties) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_services) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_state) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_lookup_service) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_provision_service) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_register_agent) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_register_counter) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint arg_unnamed_arg2);

  gboolean (*handle_release_private_network) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_remove_provider) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_request_private_network) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_request_scan) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_set_property) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  gboolean (*handle_unregister_agent) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_unregister_counter) (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  void (*property_changed) (
    ConnmanProxyManager *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*state_changed) (
    ConnmanProxyManager *object,
    const gchar *arg_unnamed_arg0);

};

GType connman_proxy_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *connman_proxy_manager_interface_info (void);
guint connman_proxy_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void connman_proxy_manager_complete_get_properties (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void connman_proxy_manager_complete_set_property (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_get_state (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void connman_proxy_manager_complete_remove_provider (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_request_scan (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_enable_technology (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_disable_technology (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_get_services (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void connman_proxy_manager_complete_lookup_service (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void connman_proxy_manager_complete_connect_service (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void connman_proxy_manager_complete_provision_service (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_connect_provider (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void connman_proxy_manager_complete_register_agent (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_unregister_agent (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_register_counter (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_unregister_counter (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_create_session (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg2);

void connman_proxy_manager_complete_destroy_session (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);

void connman_proxy_manager_complete_request_private_network (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0,
    GVariant *unnamed_arg1,
    GVariant *unnamed_arg2);

void connman_proxy_manager_complete_release_private_network (
    ConnmanProxyManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void connman_proxy_manager_emit_property_changed (
    ConnmanProxyManager *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void connman_proxy_manager_emit_state_changed (
    ConnmanProxyManager *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void connman_proxy_manager_call_get_properties (
    ConnmanProxyManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_get_properties_finish (
    ConnmanProxyManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_get_properties_sync (
    ConnmanProxyManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_set_property (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_set_property_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_set_property_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_get_state (
    ConnmanProxyManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_get_state_finish (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_get_state_sync (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_remove_provider (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_remove_provider_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_remove_provider_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_request_scan (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_request_scan_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_request_scan_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_enable_technology (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_enable_technology_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_enable_technology_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_disable_technology (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_disable_technology_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_disable_technology_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_get_services (
    ConnmanProxyManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_get_services_finish (
    ConnmanProxyManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_get_services_sync (
    ConnmanProxyManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_lookup_service (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_lookup_service_finish (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_lookup_service_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_connect_service (
    ConnmanProxyManager *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_connect_service_finish (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_connect_service_sync (
    ConnmanProxyManager *proxy,
    GVariant *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_provision_service (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_provision_service_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_provision_service_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_connect_provider (
    ConnmanProxyManager *proxy,
    GVariant *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_connect_provider_finish (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_connect_provider_sync (
    ConnmanProxyManager *proxy,
    GVariant *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_register_agent (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_register_agent_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_register_agent_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_unregister_agent (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_unregister_agent_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_unregister_agent_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_register_counter (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_register_counter_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_register_counter_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    guint arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_unregister_counter (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_unregister_counter_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_unregister_counter_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_create_session (
    ConnmanProxyManager *proxy,
    GVariant *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_create_session_finish (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_create_session_sync (
    ConnmanProxyManager *proxy,
    GVariant *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gchar **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_destroy_session (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_destroy_session_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_destroy_session_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_request_private_network (
    ConnmanProxyManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_request_private_network_finish (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_request_private_network_sync (
    ConnmanProxyManager *proxy,
    gchar **out_unnamed_arg0,
    GVariant **out_unnamed_arg1,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_manager_call_release_private_network (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_manager_call_release_private_network_finish (
    ConnmanProxyManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_manager_call_release_private_network_sync (
    ConnmanProxyManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONNMAN_PROXY_TYPE_MANAGER_PROXY (connman_proxy_manager_proxy_get_type ())
#define CONNMAN_PROXY_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_MANAGER_PROXY, ConnmanProxyManagerProxy))
#define CONNMAN_PROXY_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_MANAGER_PROXY, ConnmanProxyManagerProxyClass))
#define CONNMAN_PROXY_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_MANAGER_PROXY, ConnmanProxyManagerProxyClass))
#define CONNMAN_PROXY_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_MANAGER_PROXY))
#define CONNMAN_PROXY_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_MANAGER_PROXY))

typedef struct _ConnmanProxyManagerProxy ConnmanProxyManagerProxy;
typedef struct _ConnmanProxyManagerProxyClass ConnmanProxyManagerProxyClass;
typedef struct _ConnmanProxyManagerProxyPrivate ConnmanProxyManagerProxyPrivate;

struct _ConnmanProxyManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnmanProxyManagerProxyPrivate *priv;
};

struct _ConnmanProxyManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType connman_proxy_manager_proxy_get_type (void) G_GNUC_CONST;

void connman_proxy_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyManager *connman_proxy_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyManager *connman_proxy_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void connman_proxy_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyManager *connman_proxy_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyManager *connman_proxy_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONNMAN_PROXY_TYPE_MANAGER_SKELETON (connman_proxy_manager_skeleton_get_type ())
#define CONNMAN_PROXY_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_MANAGER_SKELETON, ConnmanProxyManagerSkeleton))
#define CONNMAN_PROXY_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_MANAGER_SKELETON, ConnmanProxyManagerSkeletonClass))
#define CONNMAN_PROXY_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_MANAGER_SKELETON, ConnmanProxyManagerSkeletonClass))
#define CONNMAN_PROXY_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_MANAGER_SKELETON))
#define CONNMAN_PROXY_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_MANAGER_SKELETON))

typedef struct _ConnmanProxyManagerSkeleton ConnmanProxyManagerSkeleton;
typedef struct _ConnmanProxyManagerSkeletonClass ConnmanProxyManagerSkeletonClass;
typedef struct _ConnmanProxyManagerSkeletonPrivate ConnmanProxyManagerSkeletonPrivate;

struct _ConnmanProxyManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnmanProxyManagerSkeletonPrivate *priv;
};

struct _ConnmanProxyManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType connman_proxy_manager_skeleton_get_type (void) G_GNUC_CONST;

ConnmanProxyManager *connman_proxy_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Clock */

#define CONNMAN_PROXY_TYPE_CLOCK (connman_proxy_clock_get_type ())
#define CONNMAN_PROXY_CLOCK(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_CLOCK, ConnmanProxyClock))
#define CONNMAN_PROXY_IS_CLOCK(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_CLOCK))
#define CONNMAN_PROXY_CLOCK_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONNMAN_PROXY_TYPE_CLOCK, ConnmanProxyClockIface))

struct _ConnmanProxyClock;
typedef struct _ConnmanProxyClock ConnmanProxyClock;
typedef struct _ConnmanProxyClockIface ConnmanProxyClockIface;

struct _ConnmanProxyClockIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_properties) (
    ConnmanProxyClock *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    ConnmanProxyClock *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*property_changed) (
    ConnmanProxyClock *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType connman_proxy_clock_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *connman_proxy_clock_interface_info (void);
guint connman_proxy_clock_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void connman_proxy_clock_complete_get_properties (
    ConnmanProxyClock *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void connman_proxy_clock_complete_set_property (
    ConnmanProxyClock *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void connman_proxy_clock_emit_property_changed (
    ConnmanProxyClock *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);



/* D-Bus method calls: */
void connman_proxy_clock_call_get_properties (
    ConnmanProxyClock *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_clock_call_get_properties_finish (
    ConnmanProxyClock *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_clock_call_get_properties_sync (
    ConnmanProxyClock *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_clock_call_set_property (
    ConnmanProxyClock *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_clock_call_set_property_finish (
    ConnmanProxyClock *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_clock_call_set_property_sync (
    ConnmanProxyClock *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONNMAN_PROXY_TYPE_CLOCK_PROXY (connman_proxy_clock_proxy_get_type ())
#define CONNMAN_PROXY_CLOCK_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_CLOCK_PROXY, ConnmanProxyClockProxy))
#define CONNMAN_PROXY_CLOCK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_CLOCK_PROXY, ConnmanProxyClockProxyClass))
#define CONNMAN_PROXY_CLOCK_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_CLOCK_PROXY, ConnmanProxyClockProxyClass))
#define CONNMAN_PROXY_IS_CLOCK_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_CLOCK_PROXY))
#define CONNMAN_PROXY_IS_CLOCK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_CLOCK_PROXY))

typedef struct _ConnmanProxyClockProxy ConnmanProxyClockProxy;
typedef struct _ConnmanProxyClockProxyClass ConnmanProxyClockProxyClass;
typedef struct _ConnmanProxyClockProxyPrivate ConnmanProxyClockProxyPrivate;

struct _ConnmanProxyClockProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnmanProxyClockProxyPrivate *priv;
};

struct _ConnmanProxyClockProxyClass
{
  GDBusProxyClass parent_class;
};

GType connman_proxy_clock_proxy_get_type (void) G_GNUC_CONST;

void connman_proxy_clock_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyClock *connman_proxy_clock_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyClock *connman_proxy_clock_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void connman_proxy_clock_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyClock *connman_proxy_clock_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyClock *connman_proxy_clock_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONNMAN_PROXY_TYPE_CLOCK_SKELETON (connman_proxy_clock_skeleton_get_type ())
#define CONNMAN_PROXY_CLOCK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_CLOCK_SKELETON, ConnmanProxyClockSkeleton))
#define CONNMAN_PROXY_CLOCK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_CLOCK_SKELETON, ConnmanProxyClockSkeletonClass))
#define CONNMAN_PROXY_CLOCK_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_CLOCK_SKELETON, ConnmanProxyClockSkeletonClass))
#define CONNMAN_PROXY_IS_CLOCK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_CLOCK_SKELETON))
#define CONNMAN_PROXY_IS_CLOCK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_CLOCK_SKELETON))

typedef struct _ConnmanProxyClockSkeleton ConnmanProxyClockSkeleton;
typedef struct _ConnmanProxyClockSkeletonClass ConnmanProxyClockSkeletonClass;
typedef struct _ConnmanProxyClockSkeletonPrivate ConnmanProxyClockSkeletonPrivate;

struct _ConnmanProxyClockSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnmanProxyClockSkeletonPrivate *priv;
};

struct _ConnmanProxyClockSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType connman_proxy_clock_skeleton_get_type (void) G_GNUC_CONST;

ConnmanProxyClock *connman_proxy_clock_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for net.connman.Technology */

#define CONNMAN_PROXY_TYPE_TECHNOLOGY (connman_proxy_technology_get_type ())
#define CONNMAN_PROXY_TECHNOLOGY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY, ConnmanProxyTechnology))
#define CONNMAN_PROXY_IS_TECHNOLOGY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY))
#define CONNMAN_PROXY_TECHNOLOGY_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY, ConnmanProxyTechnologyIface))

struct _ConnmanProxyTechnology;
typedef struct _ConnmanProxyTechnology ConnmanProxyTechnology;
typedef struct _ConnmanProxyTechnologyIface ConnmanProxyTechnologyIface;

struct _ConnmanProxyTechnologyIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_properties) (
    ConnmanProxyTechnology *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    ConnmanProxyTechnology *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*property_changed) (
    ConnmanProxyTechnology *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType connman_proxy_technology_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *connman_proxy_technology_interface_info (void);
guint connman_proxy_technology_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void connman_proxy_technology_complete_get_properties (
    ConnmanProxyTechnology *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void connman_proxy_technology_complete_set_property (
    ConnmanProxyTechnology *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void connman_proxy_technology_emit_property_changed (
    ConnmanProxyTechnology *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);



/* D-Bus method calls: */
void connman_proxy_technology_call_get_properties (
    ConnmanProxyTechnology *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_technology_call_get_properties_finish (
    ConnmanProxyTechnology *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_technology_call_get_properties_sync (
    ConnmanProxyTechnology *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void connman_proxy_technology_call_set_property (
    ConnmanProxyTechnology *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean connman_proxy_technology_call_set_property_finish (
    ConnmanProxyTechnology *proxy,
    GAsyncResult *res,
    GError **error);

gboolean connman_proxy_technology_call_set_property_sync (
    ConnmanProxyTechnology *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define CONNMAN_PROXY_TYPE_TECHNOLOGY_PROXY (connman_proxy_technology_proxy_get_type ())
#define CONNMAN_PROXY_TECHNOLOGY_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY_PROXY, ConnmanProxyTechnologyProxy))
#define CONNMAN_PROXY_TECHNOLOGY_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_TECHNOLOGY_PROXY, ConnmanProxyTechnologyProxyClass))
#define CONNMAN_PROXY_TECHNOLOGY_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY_PROXY, ConnmanProxyTechnologyProxyClass))
#define CONNMAN_PROXY_IS_TECHNOLOGY_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY_PROXY))
#define CONNMAN_PROXY_IS_TECHNOLOGY_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_TECHNOLOGY_PROXY))

typedef struct _ConnmanProxyTechnologyProxy ConnmanProxyTechnologyProxy;
typedef struct _ConnmanProxyTechnologyProxyClass ConnmanProxyTechnologyProxyClass;
typedef struct _ConnmanProxyTechnologyProxyPrivate ConnmanProxyTechnologyProxyPrivate;

struct _ConnmanProxyTechnologyProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ConnmanProxyTechnologyProxyPrivate *priv;
};

struct _ConnmanProxyTechnologyProxyClass
{
  GDBusProxyClass parent_class;
};

GType connman_proxy_technology_proxy_get_type (void) G_GNUC_CONST;

void connman_proxy_technology_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyTechnology *connman_proxy_technology_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyTechnology *connman_proxy_technology_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void connman_proxy_technology_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ConnmanProxyTechnology *connman_proxy_technology_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ConnmanProxyTechnology *connman_proxy_technology_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define CONNMAN_PROXY_TYPE_TECHNOLOGY_SKELETON (connman_proxy_technology_skeleton_get_type ())
#define CONNMAN_PROXY_TECHNOLOGY_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY_SKELETON, ConnmanProxyTechnologySkeleton))
#define CONNMAN_PROXY_TECHNOLOGY_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), CONNMAN_PROXY_TYPE_TECHNOLOGY_SKELETON, ConnmanProxyTechnologySkeletonClass))
#define CONNMAN_PROXY_TECHNOLOGY_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY_SKELETON, ConnmanProxyTechnologySkeletonClass))
#define CONNMAN_PROXY_IS_TECHNOLOGY_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), CONNMAN_PROXY_TYPE_TECHNOLOGY_SKELETON))
#define CONNMAN_PROXY_IS_TECHNOLOGY_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), CONNMAN_PROXY_TYPE_TECHNOLOGY_SKELETON))

typedef struct _ConnmanProxyTechnologySkeleton ConnmanProxyTechnologySkeleton;
typedef struct _ConnmanProxyTechnologySkeletonClass ConnmanProxyTechnologySkeletonClass;
typedef struct _ConnmanProxyTechnologySkeletonPrivate ConnmanProxyTechnologySkeletonPrivate;

struct _ConnmanProxyTechnologySkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ConnmanProxyTechnologySkeletonPrivate *priv;
};

struct _ConnmanProxyTechnologySkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType connman_proxy_technology_skeleton_get_type (void) G_GNUC_CONST;

ConnmanProxyTechnology *connman_proxy_technology_skeleton_new (void);


G_END_DECLS

#endif /* __SRC_CONNMAN_GENERATED_H__ */
